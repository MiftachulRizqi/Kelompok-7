from itertools import permutations

class WeightedGraph:
    #initialization
    def __init__(self):
        self.cityList = {}

    def printGraph(self):
        #mengiterasi setiap city
        for city in self.cityList:
            #setiap kota print nama kota
            print(city, ":", self.cityList[city])

            # Print distances to neighboring cities
            for neighbor, distance in self.cityList[city].items():
                #print tetangga dan jarak
                print("    ->", neighbor, ":", distance)

    def tambahkanKota(self, kota):
        #jika kota tidak ada di cityList
        if kota not in self.cityList:
            #maka tambahkan kota
            self.cityList[kota] = {}
            return True
        return False

    def hapusKota(self, kotaDihapus):
        #jika kotaDihapus ada di cityList
        if kotaDihapus in self.cityList:
            # Remove the city from the city list
            del self.cityList[kotaDihapus]
            # Remove references to the deleted city from other cities
            for kota in self.cityList:
                #jika kotaDihapus ada di cityList[kota]
                if kotaDihapus in self.cityList[kota]:
                    #maka hapus kotaDihapus
                    del self.cityList[kota][kotaDihapus]
            return True
        return False

    def tambahkanJalan(self, kota1, kota2, jarak):
        if kota1 in self.cityList and kota2 in self.cityList:
            self.cityList[kota1][kota2] = jarak
            self.cityList[kota2][kota1] = jarak
            return True
        return False

    def hapusJalan(self, kota1, kota2):
        if kota1 in self.cityList and kota2 in self.cityList:
            if kota2 in self.cityList[kota1]:
                del self.cityList[kota1][kota2]
                del self.cityList[kota2][kota1]
                return True
        return False

    def dijkstra(self, source):
        # Initialize distances with infinity
        #distances = {city: float('inf') for city in self.cityList}
        
        distances = {}
        for city in self.cityList:
            distances[city] = float('inf')
        
        distances[source] = 0
        #print (distances)
        # Initialize list of unvisited cities
        unvisited_cities = []
        for city in self.cityList:
            unvisited_cities.append(city)
        #unvisited_cities = list(self.cityList.keys())
        print (unvisited_cities)

        while unvisited_cities:
            # Find the unvisited city with the smallest distance
            min_distance = float('inf')
            closest_city = None
            #mengiterasi setiap kota yang belum dikunjungi
            for city in unvisited_cities:
                #jika jarak kota lebih kecil dari min_distance
                if distances[city] < min_distance:
                    min_distance = distances[city]
                    closest_city = city

            # Remove the closest city from unvisited list
            unvisited_cities.remove(closest_city)

            # Update distances to neighboring cities
            for neighbor, weight in self.cityList[closest_city].items():
                #jika jarak kota terdekat + weight lebih kecil dari jarak kota tetangga
                distance = distances[closest_city] + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance

        return distances
    
    def tsp(self):
        # Initialize variables
        shortest_distance = float('inf')
        shortest_path = []

        # Generate all permutations of cities
        cities = list(self.cityList.keys())
        for path in permutations(cities):
            # Calculate total distance for current permutation
            total_distance = 0
            for i in range(len(path) - 1):
                if path[i] in self.cityList and path[i + 1] in self.cityList[path[i]]:
                    total_distance += self.cityList[path[i]][path[i + 1]]
                else:
                    total_distance = float('inf')
                    break  # Break if path is invalid
            # Check if current permutation is shorter than the current shortest path
            if total_distance < shortest_distance:
                shortest_distance = total_distance
                shortest_path = path

        return shortest_path, shortest_distance

# Example usage with Dijkstra's algorithm:
petaJatim = WeightedGraph()
petaJatim.tambahkanKota("Purwodadi")
petaJatim.tambahkanKota("Bojonegoro")
petaJatim.tambahkanKota("Ponorogo")
petaJatim.tambahkanKota("Nganjuk")
petaJatim.tambahkanKota("Tulungagung")
petaJatim.tambahkanKota("Surabaya")
petaJatim.tambahkanKota("Malang")
petaJatim.tambahkanKota("Jember")
petaJatim.tambahkanKota("Pamekasan")
petaJatim.tambahkanKota("Situbondo")

petaJatim.tambahkanJalan("Purwodadi", "Bojonegoro", 116)
petaJatim.tambahkanJalan("Purwodadi", "Ponorogo", 168)
petaJatim.tambahkanJalan("Purwodadi", "Nganjuk", 178)
petaJatim.tambahkanJalan("Purwodadi", "Tulungagung", 243)
petaJatim.tambahkanJalan("Purwodadi", "Surabaya", 290)
petaJatim.tambahkanJalan("Purwodadi", "Malang", 354)
petaJatim.tambahkanJalan("Purwodadi", "Jember", 459)
petaJatim.tambahkanJalan("Purwodadi", "Pamekasan", 399)
petaJatim.tambahkanJalan("Purwodadi", "Situbondo", 465)

petaJatim.tambahkanJalan("Bojonegoro", "Purwodadi", 116)
petaJatim.tambahkanJalan("Bojonegoro", "Ponorogo", 91)
petaJatim.tambahkanJalan("Bojonegoro", "Nganjuk", 55)
petaJatim.tambahkanJalan("Bojonegoro", "Tulungagung", 122)
petaJatim.tambahkanJalan("Bojonegoro", "Surabaya", 145)
petaJatim.tambahkanJalan("Bojonegoro", "Malang", 214)
petaJatim.tambahkanJalan("Bojonegoro", "Jember", 320)
petaJatim.tambahkanJalan("Bojonegoro", "Pamekasan", 260)
petaJatim.tambahkanJalan("Bojonegoro", "Situbondo", 326)

petaJatim.tambahkanJalan("Ponorogo", "Purwodadi", 168)
petaJatim.tambahkanJalan("Ponorogo", "Bojonegoro", 91)
petaJatim.tambahkanJalan("Ponorogo", "Nganjuk", 88)
petaJatim.tambahkanJalan("Ponorogo", "Tulungagung", 89)
petaJatim.tambahkanJalan("Ponorogo", "Surabaya", 193)
petaJatim.tambahkanJalan("Ponorogo", "Malang", 262)
petaJatim.tambahkanJalan("Ponorogo", "Jember", 370)
petaJatim.tambahkanJalan("Ponorogo", "Pamekasan", 309)
petaJatim.tambahkanJalan("Ponorogo", "Situbondo", 375)

petaJatim.tambahkanJalan("Nganjuk", "Purwodadi", 178)
petaJatim.tambahkanJalan("Nganjuk", "Bojonegoro", 55)
petaJatim.tambahkanJalan("Nganjuk", "Ponorogo", 88)
petaJatim.tambahkanJalan("Nganjuk", "Tulungagung", 67)
petaJatim.tambahkanJalan("Nganjuk", "Surabaya", 116)
petaJatim.tambahkanJalan("Nganjuk", "Malang", 185)
petaJatim.tambahkanJalan("Nganjuk", "Jember", 292)
petaJatim.tambahkanJalan("Nganjuk", "Pamekasan", 232)
petaJatim.tambahkanJalan("Nganjuk", "Situbondo", 298)

petaJatim.tambahkanJalan("Tulungagung", "Purwodadi", 243)
petaJatim.tambahkanJalan("Tulungagung", "Bojonegoro", 122)
petaJatim.tambahkanJalan("Tulungagung", "Ponorogo", 89)
petaJatim.tambahkanJalan("Tulungagung", "Nganjuk", 67)
petaJatim.tambahkanJalan("Tulungagung", "Surabaya", 155 )
petaJatim.tambahkanJalan("Tulungagung", "Malang", 101)
petaJatim.tambahkanJalan("Tulungagung", "Jember", 330)
petaJatim.tambahkanJalan("Tulungagung", "Pamekasan", 270)
petaJatim.tambahkanJalan("Tulungagung", "Situbondo", 337)

petaJatim.tambahkanJalan("Surabaya", "Purwodadi", 290)
petaJatim.tambahkanJalan("Surabaya", "Bojonegoro", 145)
petaJatim.tambahkanJalan("Surabaya", "Ponorogo", 193)
petaJatim.tambahkanJalan("Surabaya", "Nganjuk", 116)
petaJatim.tambahkanJalan("Surabaya", "Tulungagung", 155)
petaJatim.tambahkanJalan("Surabaya", "Malang", 95)
petaJatim.tambahkanJalan("Surabaya", "Jember", 202)
petaJatim.tambahkanJalan("Surabaya", "Pamekasan", 112)
petaJatim.tambahkanJalan("Surabaya", "Situbondo", 208)

petaJatim.tambahkanJalan("Malang", "Purwodadi", 354)
petaJatim.tambahkanJalan("Malang", "Bojonegoro", 214)
petaJatim.tambahkanJalan("Malang", "Ponorogo", 262)
petaJatim.tambahkanJalan("Malang", "Nganjuk", 185)
petaJatim.tambahkanJalan("Malang", "Tulungagung", 101)
petaJatim.tambahkanJalan("Malang", "Surabaya", 95)
petaJatim.tambahkanJalan("Malang", "Jember", 207)
petaJatim.tambahkanJalan("Malang", "Pamekasan", 210)
petaJatim.tambahkanJalan("Malang", "Situbondo", 213)

petaJatim.tambahkanJalan("Jember", "Purwodadi", 459)
petaJatim.tambahkanJalan("Jember", "Bojonegoro", 320)
petaJatim.tambahkanJalan("Jember", "Ponorogo", 370)
petaJatim.tambahkanJalan("Jember", "Nganjuk", 292)
petaJatim.tambahkanJalan("Jember", "Tulungagung", 330)
petaJatim.tambahkanJalan("Jember", "Surabaya", 202)
petaJatim.tambahkanJalan("Jember", "Malang", 207)
petaJatim.tambahkanJalan("Jember", "Pamekasan", 316)
petaJatim.tambahkanJalan("Jember", "Situbondo", 68)

petaJatim.tambahkanJalan("Pamekasan", "Purwodadi", 399)
petaJatim.tambahkanJalan("Pamekasan", "Bojonegoro", 260)
petaJatim.tambahkanJalan("Pamekasan", "Ponorogo", 309)
petaJatim.tambahkanJalan("Pamekasan", "Nganjuk", 232)
petaJatim.tambahkanJalan("Pamekasan", "Tulungagung", 270)
petaJatim.tambahkanJalan("Pamekasan", "Surabaya", 112)
petaJatim.tambahkanJalan("Pamekasan", "Malang", 210)
petaJatim.tambahkanJalan("Pamekasan", "Jember", 216)
petaJatim.tambahkanJalan("Pamekasan", "Situbondo", 323)

petaJatim.tambahkanJalan("Situbondo", "Purwodadi", 465)
petaJatim.tambahkanJalan("Situbondo", "Bojonegoro", 326)
petaJatim.tambahkanJalan("Situbondo", "Ponorogo", 375)
petaJatim.tambahkanJalan("Situbondo", "Nganjuk", 298)
petaJatim.tambahkanJalan("Situbondo", "Tulungagung", 337)
petaJatim.tambahkanJalan("Situbondo", "Surabaya", 208)
petaJatim.tambahkanJalan("Situbondo", "Malang", 213)
petaJatim.tambahkanJalan("Situbondo", "jember", 68)
petaJatim.tambahkanJalan("Situbondo", "Pamekasan", 323)

petaJatim.printGraph()
shortest_distances = petaJatim.dijkstra("Purwodadi")  
print("Jarak terpendek dari Purwodadi ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()
 
shortest_distances = petaJatim.dijkstra("Bojonegoro")
print("Jarak terpendek dari Bojonegoro ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()

shortest_distances = petaJatim.dijkstra("Bojonegoro")
print("Jarak terpendek dari Ponorogo ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()

shortest_distances = petaJatim.dijkstra("Bojonegoro")
print("Jarak terpendek dari Nganjuk ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()

shortest_distances = petaJatim.dijkstra("Bojonegoro")
print("Jarak terpendek dari Tulungagung ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()

shortest_distances = petaJatim.dijkstra("Bojonegoro")
print("Jarak terpendek dari Surabaya ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()

shortest_distances = petaJatim.dijkstra("Bojonegoro")
print("Jarak terpendek dari Malang ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()

shortest_distances = petaJatim.dijkstra("Bojonegoro")
print("Jarak terpendek dari  ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()

shortest_distances = petaJatim.dijkstra("Bojonegoro")
print("Jarak terpendek dari Bojonegoro ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()

shortest_distances = petaJatim.dijkstra("Bojonegoro")
print("Jarak terpendek dari Bojonegoro ke kota lain:")
for city, distance in shortest_distances.items():
    print(city, ":", distance)
shortest_path, shortest_distance = petaJatim.tsp()
